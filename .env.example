# ============================================
# CLIENT-SIDE ENVIRONMENT VARIABLES (.env)
# ============================================
# These variables are used by the client-side application (Vite)
# and are safe to expose in the browser.
#
# IMPORTANT: This is the .env.example template.
# Copy this file to .env and replace with your actual values.
# The .env file is gitignored and should NEVER be committed.

# Firebase Configuration (Client-Side)
# Get these values from your Firebase project settings:
# https://console.firebase.google.com/project/YOUR_PROJECT/settings/general
VITE_FIREBASE_API_KEY=your_firebase_api_key_here
VITE_FIREBASE_AUTH_DOMAIN=your_project_id.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your_project_id_here
VITE_FIREBASE_STORAGE_BUCKET=your_project_id.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=your_sender_id_here
VITE_FIREBASE_APP_ID=your_app_id_here

# ============================================
# SERVER-SIDE FIREBASE FUNCTIONS SECRETS
# ============================================
# These secrets are stored securely in Firebase Functions
# and are NOT stored in .env files.
#
# To set Firebase Functions secrets, use the Firebase CLI:
# firebase functions:secrets:set SECRET_NAME
#
# Example:
# firebase functions:secrets:set OPENAI_API_KEY
# firebase functions:secrets:set GEMINI_API_KEY
# firebase functions:secrets:set GMAIL_USER
# firebase functions:secrets:set GMAIL_APP_PASSWORD

# Required Firebase Functions Secrets:
# --------------------------------------------
# 1. OPENAI_API_KEY
#    - OpenAI API key for GPT models
#    - Get from: https://platform.openai.com/api-keys
#    - Used by: /api/ai, /api/generateResume endpoints
#
# 2. GEMINI_API_KEY
#    - Google Gemini API key
#    - Get from: https://aistudio.google.com/app/apikey
#    - Used by: /api/ai, /api/generateResume endpoints
#
# 3. GMAIL_USER
#    - Gmail address for sending emails
#    - Example: your-app@gmail.com
#    - Used by: /api/sendMail endpoint
#
# 4. GMAIL_APP_PASSWORD
#    - Gmail app-specific password (NOT your regular password)
#    - Get from: https://myaccount.google.com/apppasswords
#    - Enable 2FA first, then generate app password
#    - Used by: /api/sendMail endpoint

# ============================================
# DEPLOYMENT INSTRUCTIONS
# ============================================
#
# FOR CLIENT-SIDE (.env):
# 1. Copy this file to .env
# 2. Fill in all VITE_* values with your Firebase project credentials
# 3. These will be bundled into your client-side code (safe to expose)
#
# FOR SERVER-SIDE (Firebase Functions):
# 1. Install Firebase CLI: npm install -g firebase-tools
# 2. Login to Firebase: firebase login
# 3. Set each secret using: firebase functions:secrets:set SECRET_NAME
# 4. Example commands:
#    firebase functions:secrets:set OPENAI_API_KEY
#    firebase functions:secrets:set GEMINI_API_KEY
#    firebase functions:secrets:set GMAIL_USER
#    firebase functions:secrets:set GMAIL_APP_PASSWORD
# 5. Deploy functions: firebase deploy --only functions
#
# CORS ALLOWED ORIGINS:
# - https://mexty101.web.app (Production web app)
# - https://mexty101.firebaseapp.com (Firebase hosting)
# - chrome-extension://* (Chrome extension)

# ============================================
# SECURITY BEST PRACTICES
# ============================================
# 1. NEVER commit .env files with real credentials
# 2. Use Firebase Secrets for sensitive server-side keys
# 3. Rotate API keys regularly (every 90 days recommended)
# 4. Monitor API usage for unusual activity
# 5. Use environment-specific credentials (dev/staging/prod)
# 6. Enable API key restrictions in provider consoles
# 7. Keep dependencies updated for security patches

# ============================================
# TROUBLESHOOTING
# ============================================
# - If client can't connect to Firebase:
#   Check VITE_FIREBASE_* values match your Firebase console
# - If Functions return 403/CORS errors:
#   Verify your domain is in allowedOrigins in functions/index.js
# - If AI endpoints fail:
#   Confirm secrets are set: firebase functions:secrets:access SECRET_NAME
# - If email sending fails:
#   Ensure Gmail 2FA is enabled and app password is generated
